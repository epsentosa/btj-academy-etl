// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: transform.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransformService_ProcessNYCTrip_FullMethodName = "/TransformService/ProcessNYCTrip"
	TransformService_ProcessTesting_FullMethodName = "/TransformService/ProcessTesting"
)

// TransformServiceClient is the client API for TransformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformServiceClient interface {
	ProcessNYCTrip(ctx context.Context, in *InputFileRequest, opts ...grpc.CallOption) (*ProcessFileResponse, error)
	// For Testing Load Map
	ProcessTesting(ctx context.Context, in *InputFileTestRequest, opts ...grpc.CallOption) (*ProcessFileTestResponse, error)
}

type transformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformServiceClient(cc grpc.ClientConnInterface) TransformServiceClient {
	return &transformServiceClient{cc}
}

func (c *transformServiceClient) ProcessNYCTrip(ctx context.Context, in *InputFileRequest, opts ...grpc.CallOption) (*ProcessFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessFileResponse)
	err := c.cc.Invoke(ctx, TransformService_ProcessNYCTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformServiceClient) ProcessTesting(ctx context.Context, in *InputFileTestRequest, opts ...grpc.CallOption) (*ProcessFileTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessFileTestResponse)
	err := c.cc.Invoke(ctx, TransformService_ProcessTesting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformServiceServer is the server API for TransformService service.
// All implementations must embed UnimplementedTransformServiceServer
// for forward compatibility.
type TransformServiceServer interface {
	ProcessNYCTrip(context.Context, *InputFileRequest) (*ProcessFileResponse, error)
	// For Testing Load Map
	ProcessTesting(context.Context, *InputFileTestRequest) (*ProcessFileTestResponse, error)
	mustEmbedUnimplementedTransformServiceServer()
}

// UnimplementedTransformServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransformServiceServer struct{}

func (UnimplementedTransformServiceServer) ProcessNYCTrip(context.Context, *InputFileRequest) (*ProcessFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessNYCTrip not implemented")
}
func (UnimplementedTransformServiceServer) ProcessTesting(context.Context, *InputFileTestRequest) (*ProcessFileTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTesting not implemented")
}
func (UnimplementedTransformServiceServer) mustEmbedUnimplementedTransformServiceServer() {}
func (UnimplementedTransformServiceServer) testEmbeddedByValue()                          {}

// UnsafeTransformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformServiceServer will
// result in compilation errors.
type UnsafeTransformServiceServer interface {
	mustEmbedUnimplementedTransformServiceServer()
}

func RegisterTransformServiceServer(s grpc.ServiceRegistrar, srv TransformServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransformServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransformService_ServiceDesc, srv)
}

func _TransformService_ProcessNYCTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServiceServer).ProcessNYCTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformService_ProcessNYCTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServiceServer).ProcessNYCTrip(ctx, req.(*InputFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransformService_ProcessTesting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputFileTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServiceServer).ProcessTesting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformService_ProcessTesting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServiceServer).ProcessTesting(ctx, req.(*InputFileTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransformService_ServiceDesc is the grpc.ServiceDesc for TransformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransformService",
	HandlerType: (*TransformServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessNYCTrip",
			Handler:    _TransformService_ProcessNYCTrip_Handler,
		},
		{
			MethodName: "ProcessTesting",
			Handler:    _TransformService_ProcessTesting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transform.proto",
}
